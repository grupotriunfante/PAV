<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Auditorias (Performance por Vendedor)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.0/dist/chartjs-adapter-moment.min.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .container {
            max-width: 1200px; /* Largura máxima para o conteúdo central */
        }
        .card {
            background-color: white;
            padding: 1.5rem; /* p-6 */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
        }
        .table-header th {
            text-align: left;
            padding: 0.75rem 1rem; /* Ajustado para caber mais colunas */
            font-size: 0.75rem;
            font-weight: 500;
            color: #6B7280; /* text-gray-500 */
            text-transform: uppercase;
            letter-spacing: 0.05em; /* tracking-wider */
            white-space: nowrap; /* Impede quebra de linha nos cabeçalhos */
        }
        .table-body td {
            padding: 1rem 1rem; /* Ajustado */
            font-size: 0.875rem; /* text-sm */
            color: #4B5563; /* text-gray-700 */
            white-space: nowrap; /* Impede quebra de linha nos dados */
        }
        .note-general {
            color: #3B82F6; /* blue-500 */
            font-weight: 600;
        }
        /* Ajuste para o contêiner do gráfico de pizza para ter altura fixa */
        .chart-pizza-container {
            width: 100%;
            max-width: 500px; /* Limita a largura para o gráfico de pizza não ficar muito grande */
            margin: 0 auto; /* Centraliza */
        }

        /* Estilos para os novos cards de indicadores */
        .indicator-card {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 1.5rem;
            border-radius: 0.75rem;
            background-color: white;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            border-left-width: 8px; /* Para a barra lateral colorida */
        }
        .indicator-card.blue { border-left-color: #3B82F6; /* blue-500 */ }
        .indicator-card.green { border-left-color: #22C55E; /* green-500 */ }
        .indicator-card.orange { border-left-color: #F97316; /* orange-500 */ }
        .indicator-card .value {
            font-size: 2.5rem; /* text-4xl */
            font-weight: 700; /* font-bold */
            color: #1F2937; /* gray-900 */
            margin-top: 0.5rem;
        }
        .indicator-card .label {
            font-size: 1.125rem; /* text-lg */
            font-weight: 600; /* font-semibold */
            color: #4B5563; /* gray-700 */
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-100 to-blue-200 min-h-screen flex flex-col items-center p-4">

    <div class="container w-full bg-white p-8 rounded-xl shadow-2xl flex flex-col items-center space-y-8 mt-8 mb-8">
        <div class="w-full flex justify-start mb-4">
            <button id="backButton" class="py-2 px-6 bg-gray-600 text-white font-bold rounded-lg shadow-md hover:bg-gray-700 transition duration-300 ease-in-out transform hover:-translate-y-1">
                Voltar
            </button>
        </div>

        <h1 class="text-4xl font-extrabold text-blue-800 mb-4 text-center">Indicadores de Desempenho</h1>
        <p class="text-gray-700 text-lg text-center mb-6">Visão geral e desempenho dos vendedores.</p>

        <div class="w-full grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="indicator-card blue">
                <div class="label">Total de Auditorias Realizadas</div>
                <div id="totalAudits" class="value">0</div>
            </div>
            <div class="indicator-card green">
                <div class="label">Média Geral de Conformidade</div>
                <div id="avgConformity" class="value">0%</div>
            </div>
            <div class="indicator-card orange">
                <div class="label">Média de Itens Críticos Reprovados</div>
                <div id="avgCriticalRejected" class="value">0.0</div>
            </div>
        </div>

        <div class="w-full flex flex-wrap justify-center gap-4 mb-8">
            <div class="flex flex-col">
                <label for="filterMes" class="text-gray-700 font-semibold mb-1">Filtrar por Mês:</label>
                <input type="month" id="filterMes" class="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <button id="applyFilters" class="mt-auto py-2 px-6 bg-blue-600 text-white font-bold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out">
                Aplicar Filtro
            </button>
            <button id="resetFilters" class="mt-auto py-2 px-6 bg-gray-400 text-white font-bold rounded-lg shadow-md hover:bg-gray-500 transition duration-300 ease-in-out">
                Limpar Filtro
            </button>
        </div>

        <div class="w-full card mt-8">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Notas Médias dos Vendedores</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50 table-header">
                        <tr>
                            <th>Vendedor</th>
                            <th>Auditorias</th>
                            <th>Média Planejamento (%)</th>
                            <th>Média Pré-Visita (%)</th>
                            <th>Média Leitura de Loja (%)</th>
                            <th>Média Execução (%)</th>
                            <th>Média Negociação (%)</th>
                            <th>Média Fechamento (%)</th>
                            <th>Nota Geral (%)</th>
                        </tr>
                    </thead>
                    <tbody id="salespersonPerformanceTableBody" class="bg-white divide-y divide-gray-200 table-body">
                        <tr><td colspan="9" class="text-center text-gray-500 py-4">Carregando dados...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="w-full card mt-8">
            <h3 class="text-xl font-semibold text-gray-800 mb-4 text-center">Distribuição de Auditorias por Vendedor</h3>
            <div class="chart-pizza-container">
                <canvas id="auditDistributionChart"></canvas>
            </div>
        </div>
                
        <button id="logoutButton" class="mt-8 py-3 px-8 bg-red-600 text-white font-bold rounded-lg shadow-md hover:bg-red-700 transition duration-300 ease-in-out transform hover:-translate-y-1">
            Sair
        </button>

        <p class="text-gray-500 text-sm mt-8">Desenvolvido por Triunfante Brasil</p>
    </div>

    <script>
        // Substitua pelo seu URL de implantação do App Script
        const APP_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw-DXVXSxS_Q2YjcPxC1jBtvrpe4w8TbWRt33Zxy85hKHcIEyF52kpN14bial4OoH-p/exec'; // ATUALIZE ESTE URL APÓS A IMPLANTAÇÃO DO SEU APP SCRIPT

        let allAuditData = []; // Armazenará todos os dados brutos da auditoria (do supervisor logado)
        let loggedInSupervisor = ''; // Variável para armazenar o nome do supervisor logado

        let auditDistributionChartInstance; // Instância do Chart.js para o gráfico de pizza

        // --- Mapeamento de Perguntas e Pesos por SEÇÃO ---
        // É CRUCIAL que estes nomes de perguntas correspondam EXATAMENTE aos cabeçalhos das suas colunas na planilha de Auditorias.
        const sectionWeights = {
            'Planejamento': {
                questions: ['Planejamento_1_1', 'Planejamento_1_2', 'Planejamento_1_3', 'Planejamento_1_4', 'Planejamento_1_5', 'Planejamento_1_6'],
                weights: {
                    'Planejamento_1_1': 1,
                    'Planejamento_1_2': 1,
                    'Planejamento_1_3': 2, // Corrigido para 2 pontos, conforme a imagem inicial
                    'Planejamento_1_4': 3,
                    'Planejamento_1_5': 1,
                    'Planejamento_1_6': 1
                },
                total: 9 // Soma dos pesos do Planejamento (1+1+2+3+1+1 = 9)
            },
            'Pre-Visita': {
                questions: ['PreVisit_2_1', 'PreVisit_2_2', 'PreVisit_2_3'],
                weights: {
                    'PreVisit_2_1': 4,
                    'PreVisit_2_2': 5,
                    'PreVisit_2_3': 5
                },
                total: 14 // Soma dos pesos da Pré-Visita
            },
            'Leitura de Loja': {
                questions: ['StoreReading_3_1', 'StoreReading_3_2', 'StoreReading_3_3', 'StoreReading_3_4', 'StoreReading_3_5', 'StoreReading_3_6'],
                weights: {
                    'StoreReading_3_1': 6,
                    'StoreReading_3_2': 3,
                    'StoreReading_3_3': 4,
                    'StoreReading_3_4': 6,
                    'StoreReading_3_5': 4,
                    'StoreReading_3_6': 7
                },
                total: 30 // Soma dos pesos da Leitura de Loja
            },
            'Execucao': {
                questions: ['Execution_4_1', 'Execution_4_2', 'Execution_4_3', 'Execution_4_4', 'Execution_4_5'],
                weights: {
                    'Execution_4_1': 4,
                    'Execution_4_2': 3,
                    'Execution_4_3': 4,
                    'Execution_4_4': 4,
                    'Execution_4_5': 5
                },
                total: 20 // Soma dos pesos da Execução
            },
            'Negociacao': {
                questions: ['Negotiation_5_1', 'Negotiation_5_2', 'Negotiation_5_3'],
                weights: {
                    'Negotiation_5_1': 6,
                    'Negotiation_5_2': 7,
                    'Negotiation_5_3': 7
                },
                total: 20 // Soma dos pesos da Negociação
            },
            'Fechamento': {
                questions: ['Closing_6_1', 'Closing_6_2', 'Closing_6_3'],
                weights: {
                    'Closing_6_1': 3,
                    'Closing_6_2': 2,
                    'Closing_6_3': 1 // Confirmado
                },
                total: 6 // Soma dos pesos do Fechamento
            }
        };

        // A soma total dos pontos das seções é 9 + 14 + 30 + 20 + 20 + 6 = 99.
        // Se a pontuação máxima da auditoria for 100, pode ser necessário ajustar um peso para que a soma seja 100.
        // O cálculo no dashboard usará este total como base para o percentual geral.
        const TOTAL_POINTS_ALL_SECTIONS = Object.values(sectionWeights).reduce((sum, section) => sum + section.total, 0);

        // --- DEFINA AQUI QUAIS SÃO AS PERGUNTAS CRÍTICAS ---
        // Estas são as perguntas que, se respondidas como "Não", contam como "Itens Críticos Reprovados".
        // Adaptado para usar os nomes das colunas da planilha.
        const CRITICAL_QUESTIONS = [
            'StoreReading_3_1', // Analisou todos os corredores
            'StoreReading_3_4', // Verificou rupturas e sugeriu novos produtos
            'Execution_4_1', // Abasteceu a loja com produtos do estoque
            'Execution_4_2', // Garantiu limpeza e organização nos expositores
            'Negotiation_5_2', // Mostrou soluções aplicadas (preço, validade, organização)
            'Negotiation_5_3', // Apresentou levantamento de estoque
            'Closing_6_1'  // Reforçou parceria com o cliente
        ];


        document.addEventListener('DOMContentLoaded', async function() {
            // 1. Verifica autenticação e obtém o nome do supervisor logado
            const isAuthenticated = localStorage.getItem('isAuthenticated');
            const username = localStorage.getItem('username'); // Assume que 'username' é o nome do supervisor

            if (!isAuthenticated || !username) {
                // Usando um modal customizado em vez de alert()
                showCustomAlert('Você precisa estar logado para acessar esta página.', function() {
                    window.location.href = 'inicio.htm'; // Redireciona para sua página de login
                });
                return;
            }
            loggedInSupervisor = username; // Armazena o nome do supervisor globalmente

            // 2. Carregar dados iniciais (já filtrados pelo supervisor no App Script)
            await fetchDataAndRenderDashboard();
            
            // Event Listeners para os filtros e botões de navegação
            document.getElementById('applyFilters').addEventListener('click', renderDashboard);
            document.getElementById('resetFilters').addEventListener('click', resetFiltersAndRender);
            document.getElementById('backButton').addEventListener('click', function() {
                window.location.href = 'inicio.htm'; // Redireciona para a página principal/anterior
            });
            document.getElementById('logoutButton').addEventListener('click', function() {
                localStorage.removeItem('isAuthenticated');
                localStorage.removeItem('username');
                showCustomAlert('Você foi desconectado(a).', function() {
                    window.location.href = 'index.htm';
                });
            });
        });

        async function fetchDataAndRenderDashboard() {
            try {
                // Fetch de dados de auditoria, enviando o nome do supervisor
                const response = await fetch(`${APP_SCRIPT_URL}?action=getAuditData&supervisorName=${encodeURIComponent(loggedInSupervisor)}`);
                const result = await response.json();

                if (result.success) {
                    allAuditData = result.data;
                    console.log("Dados de auditoria recebidos:", allAuditData); // LOG: Dados brutos recebidos
                    renderDashboard(); // Renderiza o dashboard com os dados já filtrados
                } else {
                    console.error('Erro ao buscar dados de auditoria:', result.message);
                    showCustomAlert('Erro ao carregar dados de auditoria: ' + result.message);
                    document.getElementById('salespersonPerformanceTableBody').innerHTML = `<tr><td colspan="9" class="text-center text-red-500 py-4">Erro ao carregar dados: ${result.message}</td></tr>`;
                    // Também limpar ou mostrar erro nos cards
                    document.getElementById('totalAudits').innerText = 'Erro';
                    document.getElementById('avgConformity').innerText = 'Erro';
                    document.getElementById('avgCriticalRejected').innerText = 'Erro';
                }
            } catch (error) {
                console.error('Erro na requisição da API de auditoria:', error);
                showCustomAlert('Erro de conexão ao carregar dados de auditoria. Verifique a URL do App Script e a conexão.');
                document.getElementById('salespersonPerformanceTableBody').innerHTML = `<tr><td colspan="9" class="text-center text-red-500 py-4">Erro de conexão.</td></tr>`;
                // Também limpar ou mostrar erro nos cards
                document.getElementById('totalAudits').innerText = 'Erro';
                document.getElementById('avgConformity').innerText = 'Erro';
                document.getElementById('avgCriticalRejected').innerText = 'Erro';
            }
        }

        /**
         * Calcula a pontuação percentual de uma seção específica ou a nota geral de uma auditoria.
         * @param {Object} audit - O objeto de auditoria (uma linha da planilha).
         * @param {string} [sectionName] - Opcional. O nome da seção (ex: 'Planejamento', 'Pre-Visita'). Se não for fornecido, calcula a nota geral.
         * @returns {number} A pontuação percentual para a seção ou a nota geral.
         */
        function calculateScore(audit, sectionName) {
            let totalPossibleForCalculation = 0;
            let achievedScore = 0;
            let questionsToConsider = [];
            let weightsToConsider = {};

            if (sectionName && sectionWeights[sectionName]) {
                const section = sectionWeights[sectionName];
                questionsToConsider = section.questions;
                weightsToConsider = section.weights;
                totalPossibleForCalculation = section.total;
            } else { // Calcular nota geral
                for (const sec in sectionWeights) {
                    questionsToConsider = questionsToConsider.concat(sectionWeights[sec].questions);
                    Object.assign(weightsToConsider, sectionWeights[sec].weights);
                }
                totalPossibleForCalculation = TOTAL_POINTS_ALL_SECTIONS;
            }
            
            console.log(`--- Calculando score para ${sectionName || 'Geral'} ---`); // LOG: Início do cálculo
            questionsToConsider.forEach(questionId => {
                const auditValue = audit.hasOwnProperty(questionId) ? String(audit[questionId]).trim().toLowerCase() : ''; // Normaliza o valor
                const expectedSim = 'sim';

                console.log(`  Pergunta: ${questionId}, Valor na auditoria: '${auditValue}', Esperado: '${expectedSim}'`); // LOG: Valor de cada pergunta

                if (auditValue === expectedSim) {
                    const weight = weightsToConsider[questionId] || 0;
                    achievedScore += weight;
                    console.log(`    MATCH! Adicionando peso: ${weight}. Score atual: ${achievedScore}`); // LOG: Match e adição de peso
                }
            });
            console.log(`Total possível para ${sectionName || 'Geral'}: ${totalPossibleForCalculation}, Score alcançado: ${achievedScore}`); // LOG: Totais
            const percentage = totalPossibleForCalculation > 0 ? (achievedScore / totalPossibleForCalculation) * 100 : 0;
            console.log(`Percentual calculado: ${percentage}%`); // LOG: Percentual final
            return percentage;
        }

        /**
         * Calcula o número de itens críticos reprovados em uma única auditoria.
         * @param {Object} audit - O objeto de auditoria.
         * @returns {number} O número de itens críticos respondidos como "Não".
         */
        function calculateCriticalRejected(audit) {
            let criticalRejectedCount = 0;
            const expectedNao = 'não'; // Ou 'nao' se for o caso na planilha

            console.log(`--- Calculando itens críticos reprovados ---`); // LOG: Início do cálculo crítico
            CRITICAL_QUESTIONS.forEach(questionId => {
                const auditValue = audit.hasOwnProperty(questionId) ? String(audit[questionId]).trim().toLowerCase() : ''; // Normaliza o valor
                console.log(`  Pergunta Crítica: ${questionId}, Valor na auditoria: '${auditValue}', Esperado: '${expectedNao}'`); // LOG: Valor de cada pergunta crítica

                if (auditValue === expectedNao) {
                    criticalRejectedCount++;
                    console.log(`    CRÍTICO REPROVADO! Contador atual: ${criticalRejectedCount}`); // LOG: Item crítico reprovado
                }
            });
            console.log(`Total de itens críticos reprovados: ${criticalRejectedCount}`); // LOG: Total de críticos
            return criticalRejectedCount;
        }

        function processAndFilterData(data) {
            const selectedMes = document.getElementById('filterMes').value;

            return data.filter(audit => {
                let matchesMes = true;

                if (selectedMes) {
                    // Assumindo que 'Data Visita' vem como "DD/MM/YYYY"
                    // É importante que o formato da data na planilha seja consistente.
                    const auditDate = moment(audit['Data Visita'], 'DD/MM/YYYY'); 
                    const filterDate = moment(selectedMes); 
                    
                    matchesMes = auditDate.isValid() && auditDate.year() === filterDate.year() &&
                                 auditDate.month() === filterDate.month();
                }
                return matchesMes;
            });
        }

        function renderDashboard() {
            const filteredData = processAndFilterData(allAuditData);

            // Variáveis para os cards de indicadores
            const totalAuditsCount = filteredData.length;
            let totalGeneralScore = 0;
            let totalCriticalRejectedItems = 0;

            // Estrutura para agregar as notas por vendedor e seção
            const salespersonPerformance = {};
            
            filteredData.forEach(audit => {
                const salesperson = audit['Vendedor'];
                if (!salesperson || String(salesperson).trim() === '') {
                    console.warn("Auditoria ignorada: Nome do vendedor vazio ou inválido.", audit); // LOG: Vendedor inválido
                    return; // Pula se o nome do vendedor for vazio ou string vazia
                }

                if (!salespersonPerformance[salesperson]) {
                    salespersonPerformance[salesperson] = {
                        auditCount: 0,
                        scores: {
                            'Planejamento': { sum: 0, count: 0 },
                            'Pre-Visita': { sum: 0, count: 0 },
                            'Leitura de Loja': { sum: 0, count: 0 },
                            'Execucao': { sum: 0, count: 0 },
                            'Negociacao': { sum: 0, count: 0 },
                            'Fechamento': { sum: 0, count: 0 },
                            'Geral': { sum: 0, count: 0 }
                        }
                    };
                }

                salespersonPerformance[salesperson].auditCount++;
                
                // Calcular e somar pontuações por seção e geral para cada auditoria
                for (const sectionName in sectionWeights) {
                    const score = calculateScore(audit, sectionName);
                    salespersonPerformance[salesperson].scores[sectionName].sum += score;
                    salespersonPerformance[salesperson].scores[sectionName].count++;
                }
                // Nota Geral da auditoria
                const generalScore = calculateScore(audit);
                salespersonPerformance[salesperson].scores['Geral'].sum += generalScore;
                salespersonPerformance[salesperson].scores['Geral'].count++;

                // Acumular dados para os cards de indicadores
                totalGeneralScore += generalScore;
                totalCriticalRejectedItems += calculateCriticalRejected(audit);
            });

            // Atualizar os cards de indicadores
            document.getElementById('totalAudits').innerText = totalAuditsCount;
            const avgConformity = totalAuditsCount > 0 ? (totalGeneralScore / totalAuditsCount).toFixed(0) : 0;
            document.getElementById('avgConformity').innerText = `${avgConformity}%`;
            const avgCriticalRejected = totalAuditsCount > 0 ? (totalCriticalRejectedItems / totalAuditsCount).toFixed(1) : 0.0;
            document.getElementById('avgCriticalRejected').innerText = `${avgCriticalRejected}`;


            // Preparar dados para a tabela e o gráfico
            const dataForTableAndChart = Object.keys(salespersonPerformance).map(name => {
                const spData = salespersonPerformance[name];
                const avgScores = {};
                for (const sectionName in spData.scores) {
                    const s = spData.scores[sectionName];
                    avgScores[sectionName] = s.count > 0 ? (s.sum / s.count).toFixed(0) : 0; // Arredonda para inteiro
                }
                return {
                    name: name,
                    audits: spData.auditCount,
                    avgScores: avgScores
                };
            }).sort((a, b) => b.avgScores['Geral'] - a.avgScores['Geral']); // Ordena pela Nota Geral

            // 2. Renderizar Tabela de Notas Médias dos Vendedores
            renderSalespersonPerformanceTable(dataForTableAndChart);

            // 3. Renderizar Gráfico de Pizza de Distribuição de Auditorias
            renderAuditDistributionChart(dataForTableAndChart);
        }

        function resetFiltersAndRender() {
            document.getElementById('filterMes').value = '';
            renderDashboard();
        }

        // --- Funções de Renderização ---

        function renderSalespersonPerformanceTable(salespersons) {
            const tableBody = document.getElementById('salespersonPerformanceTableBody');
            tableBody.innerHTML = ''; // Limpa a tabela

            if (salespersons.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="9" class="text-center text-gray-500 py-4">Nenhum dado de auditoria encontrado para o período ou vendedores.</td></tr>`;
                return;
            }

            salespersons.forEach(sp => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                row.innerHTML = `
                    <td class="px-6 py-4">${sp.name}</td>
                    <td class="px-6 py-4">${sp.audits}</td>
                    <td class="px-6 py-4">${sp.avgScores['Planejamento']}%</td>
                    <td class="px-6 py-4">${sp.avgScores['Pre-Visita']}%</td>
                    <td class="px-6 py-4">${sp.avgScores['Leitura de Loja']}%</td>
                    <td class="px-6 py-4">${sp.avgScores['Execucao']}%</td>
                    <td class="px-6 py-4">${sp.avgScores['Negociacao']}%</td>
                    <td class="px-6 py-4">${sp.avgScores['Fechamento']}%</td>
                    <td class="px-6 py-4 font-semibold note-general">${sp.avgScores['Geral']}%</td>
                `;
                tableBody.appendChild(row);
            });
        }

        function renderAuditDistributionChart(salespersons) {
            const ctx = document.getElementById('auditDistributionChart').getContext('2d');

            const labels = salespersons.map(sp => sp.name);
            const auditCounts = salespersons.map(sp => sp.audits);

            // Gerar cores dinamicamente para o gráfico de pizza
            const backgroundColors = [];
            const borderColors = [];
            const predefinedColors = [
                'rgba(255, 99, 132, 0.7)', // Vermelho
                'rgba(54, 162, 235, 0.7)', // Azul
                'rgba(255, 206, 86, 0.7)', // Amarelo
                'rgba(75, 192, 192, 0.7)', // Verde Água
                'rgba(153, 102, 255, 0.7)', // Roxo
                'rgba(255, 159, 64, 0.7)', // Laranja
                'rgba(199, 199, 199, 0.7)', // Cinza
                'rgba(83, 102, 255, 0.7)', // Azul claro
                'rgba(255, 83, 187, 0.7)', // Rosa
                'rgba(0, 204, 102, 0.7)' // Verde esmeralda
            ];

            for (let i = 0; i < labels.length; i++) {
                const colorIndex = i % predefinedColors.length;
                backgroundColors.push(predefinedColors[colorIndex]);
                borderColors.push(predefinedColors[colorIndex].replace('0.7)', '1)')); // Borda sólida
            }

            if (auditDistributionChartInstance) {
                auditDistributionChartInstance.destroy(); // Destrói a instância anterior do gráfico
            }
            auditDistributionChartInstance = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Número de Auditorias',
                        data: auditCounts,
                        backgroundColor: backgroundColors,
                        borderColor: borderColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right', // Posição da legenda à direita para melhor visualização
                            labels: {
                                boxWidth: 20 // Largura da caixa de cor na legenda
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const total = context.dataset.data.reduce((sum, current) => sum + current, 0);
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        /**
         * Função para exibir um alerta customizado em vez de `alert()`.
         * @param {string} message A mensagem a ser exibida.
         * @param {function} [callback] Uma função a ser executada após o alerta ser fechado.
         */
        function showCustomAlert(message, callback) {
            const alertModal = document.createElement('div');
            alertModal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50';
            alertModal.innerHTML = `
                <div class="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full text-center">
                    <p class="text-lg font-semibold text-gray-800 mb-4">${message}</p>
                    <button id="alertCloseButton" class="py-2 px-4 bg-blue-600 text-white font-bold rounded-md hover:bg-blue-700 transition duration-300">OK</button>
                </div>
            `;
            document.body.appendChild(alertModal);

            document.getElementById('alertCloseButton').addEventListener('click', function() {
                document.body.removeChild(alertModal);
                if (callback) {
                    callback();
                }
            });
        }
    </script>
</body>
</html>
