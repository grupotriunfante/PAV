<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Desempenho de Auditorias</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease-in-out;
        }
        .chart-container { position: relative; height: 400px; width: 100%; }
        .score-high { background-color: #D1FAE5; color: #065F46; }
        .score-medium { background-color: #FEF3C7; color: #92400E; }
        .score-low { background-color: #FEE2E2; color: #991B1B; }
        .table-section-header { background-color: #F3F4F6; font-weight: 600; color: #1F2937; }
        /* Esconde o filtro de supervisor por padrão */
        .manager-only { display: none; }
    </style>
</head>
<body class="bg-gray-50">

    <main class="container mx-auto p-4 md:p-8 space-y-8">
        
        <header class="flex flex-wrap justify-between items-center gap-4">
            <div>
                <h1 id="dashboardTitle" class="text-3xl font-extrabold text-gray-900">Dashboard de Desempenho</h1>
                <p class="text-gray-500 mt-1">Análise de performance das auditorias de campo.</p>
            </div>
            <div class="flex items-center space-x-4">
                 <button id="backButton" class="py-2 px-4 bg-white text-gray-700 font-semibold rounded-lg border border-gray-300 hover:bg-gray-100 transition">Voltar</button>
                 <button id="logoutButton" class="py-2 px-4 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition">Sair</button>
            </div>
        </header>

        <div class="card p-4">
            <div class="flex flex-wrap items-end gap-4">
                <div class="flex-grow min-w-[200px] manager-only">
                    <label for="filterSupervisor" class="text-sm font-medium text-gray-700">Supervisor</label>
                    <select id="filterSupervisor" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Todos os Supervisores</option>
                    </select>
                </div>
                <div class="flex-grow min-w-[200px]">
                    <label for="filterVendedor" class="text-sm font-medium text-gray-700">Vendedor</label>
                    <select id="filterVendedor" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Todos os Vendedores</option>
                    </select>
                </div>
                <div class="flex-grow min-w-[150px]">
                    <label for="filterMes" class="text-sm font-medium text-gray-700">Mês</label>
                    <input type="month" id="filterMes" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <button id="applyFilters" class="py-2 px-6 bg-blue-600 text-white font-bold rounded-lg shadow-md hover:bg-blue-700 transition">Aplicar</button>
                <button id="resetFilters" class="py-2 px-6 bg-gray-600 text-white font-bold rounded-lg shadow-md hover:bg-gray-700 transition">Limpar</button>
                <button id="exportExcelBtn" class="py-2 px-6 bg-green-600 text-white font-bold rounded-lg shadow-md hover:bg-green-700 transition flex items-center gap-2">
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M10.75 2.75a.75.75 0 00-1.5 0v8.614L6.295 8.235a.75.75 0 10-1.09 1.03l4.25 4.5a.75.75 0 001.09 0l4.25-4.5a.75.75 0 00-1.09-1.03l-2.955 3.129V2.75z" /><path d="M3.5 12.75a.75.75 0 00-1.5 0v2.5A2.75 2.75 0 004.75 18h10.5A2.75 2.75 0 0018 15.25v-2.5a.75.75 0 00-1.5 0v2.5c0 .69-.56 1.25-1.25 1.25H4.75c-.69 0-1.25-.56-1.25-1.25v-2.5z" /></svg>
                    Exportar
                </button>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="card p-6 flex items-center space-x-4">
                <div class="bg-blue-100 p-3 rounded-full">
                    <svg class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/></svg>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Total de Auditorias</p>
                    <p id="totalAudits" class="text-3xl font-bold text-gray-900">0</p>
                </div>
            </div>
            <div class="card p-6 flex items-center space-x-4">
                <div class="bg-green-100 p-3 rounded-full">
                    <svg class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Média de Conformidade</p>
                    <p id="avgConformity" class="text-3xl font-bold text-gray-900">0%</p>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
            <div class="lg:col-span-2 card p-6">
                <h3 id="rankingTitle" class="text-lg font-semibold text-gray-800">Ranking de Performance</h3>
                <div class="chart-container mt-4"><canvas id="performanceRankingChart"></canvas></div>
            </div>
            <div class="lg:col-span-3 card p-6">
                <h3 class="text-lg font-semibold text-gray-800">Desempenho por Pergunta</h3>
                <div class="mt-4 overflow-auto max-h-[360px]">
                     <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50 sticky top-0">
                            <tr>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ação</th>
                                <th class="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Não Conforme</th>
                                <th class="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">% Conforme</th>
                            </tr>
                        </thead>
                        <tbody id="questionPerformanceTableBody" class="bg-white divide-y divide-gray-200"></tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <div class="card p-6">
            <h3 id="detailedTableTitle" class="text-lg font-semibold text-gray-800 mb-4">Desempenho Detalhado</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                     <thead class="bg-gray-50">
                        <tr id="detailedTableHeader">
                            </tr>
                    </thead>
                    <tbody id="detailedPerformanceTableBody" class="bg-white divide-y divide-gray-200">
                        <tr><td colspan="10" class="text-center text-gray-500 py-8">Carregando dados...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
        
    </main>

    <script>
        const APP_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw-DXVXSxS_Q2YjcPxC1jBtvrpe4w8TbWRt33Zxy85hKHcIEyF52kpN14bial4OoH-p/exec';
        let allAuditData = [];
        let chartInstances = {};

        const loggedInUser = {
            name: localStorage.getItem('username'),
            role: localStorage.getItem('userRole'),
            unit: localStorage.getItem('userUnit')
        };
        
        // ** INÍCIO DO CÓDIGO CORRIGIDO **

        const questionWeights = {
            'planejamento_1_1': 1, 'planejamento_1_2': 1, 'planejamento_1_3': 1, 'planejamento_1_4': 1, 'planejamento_1_5': 1, 'planejamento_1_6': 1, 'planejamento_1_7': 1, 'planejamento_1_8': 1, 'planejamento_1_9': 1,
            'preVisit_2_1': 1, 'preVisit_2_2': 1, 'preVisit_2_3': 1,
            'storeReading_3_1': 1, 'storeReading_3_2': 1, 'storeReading_3_3': 1, 'storeReading_3_4': 1, 'storeReading_3_5': 1, 'storeReading_3_6': 1,
            'execution_4_1': 1, 'execution_4_2': 1, 'execution_4_3': 1, 'execution_4_4': 1, 'execution_4_5': 1,
            'negotiation_5_1': 1, 'negotiation_5_2': 1, 'negotiation_5_3': 1, 'negotiation_5_4': 1,
            'closing_6_1': 1, 'closing_6_2': 1
        };

        const questionTextMap = {
            'planejamento_1_1': '1.1. Bem-apresentado',
            'planejamento_1_2': '1.2. Palm carregado',
            'planejamento_1_3': '1.3. Carro limpo/organizado',
            'planejamento_1_4': '1.4. Roteiro definido',
            'planejamento_1_5': '1.5. Metas definidas',
            'planejamento_1_6': '1.6. Materiais em mãos',
            'planejamento_1_7': '1.7. Conhecimento das campanhas',
            'planejamento_1_8': '1.8. Pendências revisadas',
            'planejamento_1_9': '1.9. Pontualidade',
            'preVisit_2_1': '2.1. Verificou histórico',
            'preVisit_2_2': '2.2. Criou estratégias',
            'preVisit_2_3': '2.3. Itens focos do mês',
            'storeReading_3_1': '3.1. Analisou corredores',
            'storeReading_3_2': '3.2. Produtos precificados',
            'storeReading_3_3': '3.3. Visitou o estoque',
            'storeReading_3_4': '3.4. Verificou rupturas',
            'storeReading_3_5': '3.5. Checou lançamentos',
            'storeReading_3_6': '3.6. Montou pré-pedido',
            'execution_4_1': '4.1. Abasteceu a loja',
            'execution_4_2': '4.2. Garantiu limpeza',
            'execution_4_3': '4.3. Posicionou expositores',
            'execution_4_4': '4.4. Aplicou Cross Merchandising',
            'execution_4_5': '4.5. Verificou validade (FIFO)',
            'negotiation_5_1': '5.1. Iniciou negociação c/ serviços',
            'negotiation_5_2': '5.2. Mostrou soluções aplicadas',
            'negotiation_5_3': '5.3. Apresentou levantamento',
            'negotiation_5_4': '5.4. Reforçou parceria',
            'closing_6_1': '6.1. Combinou valor/prazo',
            'closing_6_2': '6.2. Repassou próxima visita'
        };

        const sectionDefinitions = {
            'Planejamento': {
                questions: ['planejamento_1_1', 'planejamento_1_2', 'planejamento_1_3', 'planejamento_1_4', 'planejamento_1_5', 'planejamento_1_6', 'planejamento_1_7', 'planejamento_1_8', 'planejamento_1_9'],
            },
            'Pré-Visita': {
                questions: ['preVisit_2_1', 'preVisit_2_2', 'preVisit_2_3'],
            },
            'Leitura de Loja': {
                questions: ['storeReading_3_1', 'storeReading_3_2', 'storeReading_3_3', 'storeReading_3_4', 'storeReading_3_5', 'storeReading_3_6'],
            },
            'Execução': {
                questions: ['execution_4_1', 'execution_4_2', 'execution_4_3', 'execution_4_4', 'execution_4_5'],
            },
            'Negociação': {
                questions: ['negotiation_5_1', 'negotiation_5_2', 'negotiation_5_3', 'negotiation_5_4'],
            },
            'Fechamento': {
                questions: ['closing_6_1', 'closing_6_2'],
            }
        };

        // Adiciona o total de pontos a cada seção dinamicamente
        for (const sectionName in sectionDefinitions) {
            sectionDefinitions[sectionName].total = sectionDefinitions[sectionName].questions.reduce((sum, qId) => sum + (questionWeights[qId] || 0), 0);
        }

        // ** FIM DO CÓDIGO CORRIGIDO **


        document.addEventListener('DOMContentLoaded', async function() {
            if (!localStorage.getItem('isAuthenticated') || !loggedInUser.name) {
                alert('Sessão expirada. Por favor, faça login novamente.');
                window.location.href = 'index.htm';
                return;
            }
            
            setupUIForRole();
            await fetchDataAndRenderDashboard();
            
            document.getElementById('applyFilters').addEventListener('click', () => renderDashboard(processAndFilterData()));
            document.getElementById('resetFilters').addEventListener('click', resetFiltersAndRender);
            document.getElementById('backButton').addEventListener('click', () => window.location.href = 'inicio.htm');
            document.getElementById('logoutButton').addEventListener('click', () => {
                localStorage.clear();
                window.location.href = 'index.htm';
            });
            document.getElementById('exportExcelBtn').addEventListener('click', exportData);
        });

        function setupUIForRole() {
            const title = document.getElementById('dashboardTitle');
            if (loggedInUser.role === 'Gerente') {
                title.textContent = `Dashboard Gerencial - Unidade ${loggedInUser.unit}`;
                document.querySelector('.manager-only').style.display = 'block';
                document.getElementById('rankingTitle').textContent = 'Ranking de Supervisores (Nº Auditorias)';
                document.getElementById('detailedTableTitle').textContent = 'Desempenho Detalhado por Vendedor';
            } else { // Supervisor
                title.textContent = `Dashboard de Desempenho - ${loggedInUser.name}`;
                document.getElementById('rankingTitle').textContent = 'Ranking de Vendedores (Nota Média)';
                document.getElementById('detailedTableTitle').textContent = 'Desempenho Detalhado por Vendedor';
            }
        }

        async function fetchDataAndRenderDashboard() {
            document.body.style.cursor = 'wait';
            let url = `${APP_SCRIPT_URL}?action=getAuditData`;

            if (loggedInUser.role === 'Gerente') {
                url += `&managerUnidade=${encodeURIComponent(loggedInUser.unit)}`;
            } else {
                url += `&supervisorName=${encodeURIComponent(loggedInUser.name)}`;
            }

            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`Erro de rede: ${response.statusText}`);
                const result = await response.json();
                
                if (result.success) {
                    allAuditData = result.data.map(audit => {
                        // Calcula as pontuações de cada seção para cada auditoria
                        let totalPoints = 0;
                        audit.sectionScores = {};
                        for (const sectionName in sectionDefinitions) {
                            let sectionAchieved = 0;
                            const sectionDef = sectionDefinitions[sectionName];
                            sectionDef.questions.forEach(qId => {
                                // ** CORREÇÃO IMPORTANTE AQUI: A chave no objeto 'audit' pode ser diferente **
                                // A planilha salva com 'preVisit_2_1' mas o JS precisa ser consistente.
                                // O ideal é que a planilha e o JS usem a mesma chave. Vamos assumir que a planilha usa a chave do formulário.
                                if (String(audit[qId]).trim().toLowerCase() === 'sim') {
                                    sectionAchieved += questionWeights[qId] || 0;
                                }
                            });
                            audit.sectionScores[sectionName] = sectionDef.total > 0 ? (sectionAchieved / sectionDef.total) * 100 : 0;
                            totalPoints += sectionAchieved;
                        }
                        audit.generalScore = totalPoints; // Pontuação total de 100
                        return audit;
                    });
                    populateFilters(allAuditData);
                    renderDashboard(allAuditData);
                } else { 
                    throw new Error(result.message || 'Falha ao buscar dados.'); 
                }
            } catch (error) {
                console.error('Erro ao buscar dados:', error);
                alert(`Não foi possível carregar os dados. Erro: ${error.message}`);
            } finally {
                document.body.style.cursor = 'default';
            }
        }

        function populateFilters(data) {
            const salespeople = [...new Set(data.map(audit => audit.Vendedor).filter(Boolean))].sort();
            const salespersonSelect = document.getElementById('filterVendedor');
            salespersonSelect.innerHTML = '<option value="">Todos os Vendedores</option>';
            salespeople.forEach(name => salespersonSelect.innerHTML += `<option value="${name}">${name}</option>`);

            if (loggedInUser.role === 'Gerente') {
                const supervisors = [...new Set(data.map(audit => audit.Supervisor).filter(Boolean))].sort();
                const supervisorSelect = document.getElementById('filterSupervisor');
                supervisorSelect.innerHTML = '<option value="">Todos os Supervisores</option>';
                supervisors.forEach(name => supervisorSelect.innerHTML += `<option value="${name}">${name}</option>`);
            }
        }
        
        function processAndFilterData() {
            const selectedSupervisor = document.getElementById('filterSupervisor').value;
            const selectedVendedor = document.getElementById('filterVendedor').value;
            const selectedMes = document.getElementById('filterMes').value;

            return allAuditData.filter(audit => {
                const matchesSupervisor = (loggedInUser.role !== 'Gerente' || !selectedSupervisor || audit.Supervisor === selectedSupervisor);
                const matchesVendedor = !selectedVendedor || audit.Vendedor === selectedVendedor;
                
                let matchesMes = true;
                if (selectedMes && audit['Data Visita']) {
                    matchesMes = audit['Data Visita'].startsWith(selectedMes);
                }
                return matchesSupervisor && matchesVendedor && matchesMes;
            });
        }
        
        function renderDashboard(data) {
            const performanceMetrics = calculatePerformanceMetrics(data);

            updateKpiCards(data.length, performanceMetrics.overallAverage);
            renderQuestionPerformanceTable(calculateQuestionPerformance(data));
            
            if (loggedInUser.role === 'Gerente') {
                const supervisorMetrics = performanceMetrics.bySupervisor;
                renderRankingChart('performanceRankingChart', supervisorMetrics, 'Nº de Auditorias', 'auditCount');
                renderDetailedTable(performanceMetrics.bySalesperson, true); // true para modo gerente
            } else {
                const salespersonMetrics = performanceMetrics.bySalesperson;
                renderRankingChart('performanceRankingChart', salespersonMetrics, 'Nota Média', 'generalAvg');
                renderDetailedTable(salespersonMetrics, false); // false para modo supervisor
            }
        }

        function resetFiltersAndRender() {
            document.getElementById('filterVendedor').value = '';
            document.getElementById('filterMes').value = '';
            if (loggedInUser.role === 'Gerente') {
                document.getElementById('filterSupervisor').value = '';
            }
            renderDashboard(allAuditData);
        }

        function calculatePerformanceMetrics(data) {
            const bySalesperson = {};
            const bySupervisor = {};
            let totalGeneralScore = 0;

            data.forEach(audit => {
                const salesperson = audit.Vendedor;
                const supervisor = audit.Supervisor;
                totalGeneralScore += audit.generalScore;

                if (salesperson) {
                    if (!bySalesperson[salesperson]) {
                        bySalesperson[salesperson] = { name: salesperson, supervisor: supervisor, auditCount: 0, totalScore: 0, sectionTotals: {} };
                    }
                    bySalesperson[salesperson].auditCount++;
                    bySalesperson[salesperson].totalScore += audit.generalScore;
                    for(const sectionName in audit.sectionScores) {
                        if(!bySalesperson[salesperson].sectionTotals[sectionName]) bySalesperson[salesperson].sectionTotals[sectionName] = 0;
                        bySalesperson[salesperson].sectionTotals[sectionName] += audit.sectionScores[sectionName];
                    }
                }
                if (supervisor) {
                     if (!bySupervisor[supervisor]) {
                        bySupervisor[supervisor] = { name: supervisor, auditCount: 0, totalScore: 0 };
                    }
                    bySupervisor[supervisor].auditCount++;
                    bySupervisor[supervisor].totalScore += audit.generalScore;
                }
            });

            const salespersonArray = Object.values(bySalesperson).map(sp => {
                sp.generalAvg = sp.auditCount > 0 ? sp.totalScore / sp.auditCount : 0;
                sp.avgSectionScores = {};
                for(const sectionName in sp.sectionTotals) {
                    sp.avgSectionScores[sectionName] = sp.auditCount > 0 ? sp.sectionTotals[sectionName] / sp.auditCount : 0;
                }
                return sp;
            });

            const supervisorArray = Object.values(bySupervisor).map(sup => {
                 sup.generalAvg = sup.auditCount > 0 ? sup.totalScore / sup.auditCount : 0;
                 return sup;
            });

            return {
                bySalesperson: salespersonArray.sort((a,b) => b.generalAvg - a.generalAvg),
                bySupervisor: supervisorArray.sort((a,b) => b.auditCount - a.auditCount),
                overallAverage: data.length > 0 ? totalGeneralScore / data.length : 0
            };
        }

        function calculateQuestionPerformance(data) {
             const stats = {};
             Object.keys(questionTextMap).forEach(qId => {
                stats[qId] = { success: 0, total: 0 };
             });
             data.forEach(audit => {
                Object.keys(questionTextMap).forEach(qId => {
                    if (audit.hasOwnProperty(qId)) {
                        stats[qId].total++;
                        if (String(audit[qId]).trim().toLowerCase() === 'sim') {
                            stats[qId].success++;
                        }
                    }
                });
             });
             return Object.keys(questionTextMap).map(qId => ({
                text: questionTextMap[qId],
                nonConformity: stats[qId].total - stats[qId].success,
                conformity: stats[qId].total > 0 ? (stats[qId].success / stats[qId].total) * 100 : 0
             }));
        }
        
        function updateKpiCards(totalAudits, avgConformity) {
            document.getElementById('totalAudits').innerText = totalAudits;
            document.getElementById('avgConformity').innerText = `${avgConformity.toFixed(0)}%`;
        }

        function renderDetailedTable(data, isManagerView) {
            const tableHeader = document.getElementById('detailedTableHeader');
            const tableBody = document.getElementById('detailedPerformanceTableBody');
            tableHeader.innerHTML = '';
            tableBody.innerHTML = '';
            
            let headers = [];
            if (isManagerView) {
                headers.push('Supervisor', 'Vendedor');
            } else {
                headers.push('Vendedor');
            }
            headers.push('Auditorias', ...Object.keys(sectionDefinitions), 'Nota Geral');
            tableHeader.innerHTML = headers.map(h => `<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${h}</th>`).join('');

            if (data.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="${headers.length}" class="text-center text-gray-500 py-8">Nenhum dado encontrado.</td></tr>`;
                return;
            }
            const getScoreClass = score => score >= 90 ? 'score-high' : score >= 70 ? 'score-medium' : 'score-low';

            data.forEach(item => {
                const row = document.createElement('tr');
                let cells = '';
                if(isManagerView) {
                    cells += `<td class="px-4 py-4 font-medium text-gray-800">${item.supervisor}</td>`;
                }
                cells += `<td class="px-4 py-4 font-medium text-gray-900">${item.name}</td>
                          <td class="px-4 py-4 text-gray-500">${item.auditCount}</td>`;

                Object.keys(sectionDefinitions).forEach(sec => {
                    const score = item.avgSectionScores[sec] || 0;
                    cells += `<td class="px-4 py-4 font-semibold text-center ${getScoreClass(score)}">${score.toFixed(0)}%</td>`;
                });
                cells += `<td class="px-4 py-4 font-bold text-center text-blue-700 ${getScoreClass(item.generalAvg)}">${item.generalAvg.toFixed(0)}%</td>`;
                row.innerHTML = cells;
                tableBody.appendChild(row);
            });
        }

        function renderQuestionPerformanceTable(data) {
            const tableBody = document.getElementById('questionPerformanceTableBody');
            tableBody.innerHTML = '';
            const getScoreClass = score => score >= 90 ? 'score-high' : score >= 70 ? 'score-medium' : 'score-low';
            data.forEach(item => {
                tableBody.innerHTML += `
                    <tr>
                        <td class="px-4 py-3 text-sm text-gray-700">${item.text}</td>
                        <td class="px-4 py-3 text-sm font-bold text-center ${item.nonConformity > 0 ? 'text-red-600' : 'text-gray-500'}">${item.nonConformity}</td>
                        <td class="px-4 py-3 text-sm font-semibold text-center ${getScoreClass(item.conformity)}">${item.conformity.toFixed(0)}%</td>
                    </tr>
                `;
            });
        }
        
        function renderRankingChart(chartId, data, label, dataKey) {
            const labels = data.map(item => item.name);
            const values = data.map(item => item[dataKey]);
            renderChart(chartId, 'bar', {
                labels,
                datasets: [{ label, data: values, backgroundColor: '#3b82f6' }]
            }, {
                indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                plugins: { legend: { display: false } },
                scales: { x: { beginAtZero: true } }
            });
        }

        function renderChart(chartId, type, data, options) {
            const ctx = document.getElementById(chartId)?.getContext('2d');
            if (!ctx) return;
            if (chartInstances[chartId]) chartInstances[chartId].destroy();
            chartInstances[chartId] = new Chart(ctx, { type, data, options });
        }

        function exportData() {
            // (Sua função de exportação atual pode ser mantida como está)
        }
    </script>
</body>
</html>
