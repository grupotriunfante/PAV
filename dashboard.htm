<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Desempenho de Auditorias</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.0/dist/chartjs-adapter-moment.min.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease-in-out;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
        }
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
        }
        .score-high { background-color: #D1FAE5; color: #065F46; }
        .score-medium { background-color: #FEF3C7; color: #92400E; }
        .score-low { background-color: #FEE2E2; color: #991B1B; }
    </style>
</head>
<body class="bg-gray-50">

    <main class="container mx-auto p-4 md:p-8 space-y-8">
        
        <header class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-extrabold text-gray-900">Dashboard de Desempenho</h1>
                <p class="text-gray-500 mt-1">Análise de performance das auditorias de campo.</p>
            </div>
            <div class="flex items-center space-x-4">
                 <button id="backButton" class="py-2 px-4 bg-white text-gray-700 font-semibold rounded-lg border border-gray-300 hover:bg-gray-100 transition">Voltar</button>
                 <button id="logoutButton" class="py-2 px-4 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition">Sair</button>
            </div>
        </header>

        <div class="card p-4">
            <div class="flex flex-wrap items-end gap-4">
                <div class="flex-grow">
                    <label for="filterVendedor" class="text-sm font-medium text-gray-700">Vendedor</label>
                    <select id="filterVendedor" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Todos os Vendedores</option>
                    </select>
                </div>
                <div class="flex-grow">
                    <label for="filterMes" class="text-sm font-medium text-gray-700">Mês</label>
                    <input type="month" id="filterMes" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <button id="applyFilters" class="py-2 px-6 bg-blue-600 text-white font-bold rounded-lg shadow-md hover:bg-blue-700 transition">Aplicar</button>
                <button id="resetFilters" class="py-2 px-6 bg-gray-600 text-white font-bold rounded-lg shadow-md hover:bg-gray-700 transition">Limpar</button>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="card p-6 flex items-center space-x-4">
                <div class="bg-blue-100 p-3 rounded-full">
                    <svg class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/></svg>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Total de Auditorias</p>
                    <p id="totalAudits" class="text-3xl font-bold text-gray-900">0</p>
                </div>
            </div>
            <div class="card p-6 flex items-center space-x-4">
                <div class="bg-green-100 p-3 rounded-full">
                    <svg class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Média de Conformidade</p>
                    <p id="avgConformity" class="text-3xl font-bold text-gray-900">0%</p>
                </div>
            </div>
            <div class="card p-6 flex items-center space-x-4">
                 <div class="bg-red-100 p-3 rounded-full">
                    <svg class="h-8 w-8 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636"/></svg>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Média de Falhas Críticas</p>
                    <p id="avgCriticalRejected" class="text-3xl font-bold text-gray-900">0.0</p>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="card p-6">
                <h3 class="text-lg font-semibold text-gray-800">Ranking de Performance (Nota Geral)</h3>
                <div class="chart-container mt-4"><canvas id="performanceRankingChart"></canvas></div>
            </div>
            <div class="card p-6">
                <h3 class="text-lg font-semibold text-gray-800">Pontos Fracos por Etapa (Média Geral)</h3>
                <div class="chart-container mt-4"><canvas id="problemAreasChart"></canvas></div>
            </div>
        </div>
        
        <div class="card p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Principais Falhas em Itens Críticos</h3>
            <div id="topFailingItems" class="space-y-3 text-gray-700">
                <p>Nenhuma falha crítica encontrada ou dados insuficientes.</p>
            </div>
        </div>

        <div class="card p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Desempenho Detalhado por Vendedor</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vendedor</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Auditorias</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Planejamento</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pré-Visita</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Leitura de Loja</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Execução</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Negociação</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fechamento</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nota Geral</th>
                        </tr>
                    </thead>
                    <tbody id="salespersonPerformanceTableBody" class="bg-white divide-y divide-gray-200">
                        <tr><td colspan="9" class="text-center text-gray-500 py-8">Carregando dados...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <footer class="text-center text-gray-500 text-sm mt-4">
            Desenvolvido por Triunfante Brasil
        </footer>
    </main>

    <script>
        const APP_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw-DXVXSxS_Q2YjcPxC1jBtvrpe4w8TbWRt33Zxy85hKHcIEyF52kpN14bial4OoH-p/exec';
        let allAuditData = [];
        let loggedInSupervisor = '';
        let chartInstances = {};

        // ========================================================================
        // ============= CORREÇÃO: Usando os nomes EXATOS das colunas =============
        // ========================================================================
        const sectionWeights = {
            'Planejamento': {
                questions: ['Planejamento_1_1', 'Planejamento_1_2', 'Planejamento_1_3', 'Planejamento_1_4', 'Planejamento_1_5', 'Planejamento_1_6', 'Planejamento_1_7', 'Planejamento_1_8', 'Planejamento_1_9'],
                total: 9 
            },
            'Pré-Visita': {
                questions: ['PreVisit_2_1', 'PreVisit_2_2', 'PreVisit_2_3'],
                total: 3
            },
            'Leitura de Loja': {
                questions: ['StoreReading_3_1', 'StoreReading_3_2', 'StoreReading_3_3', 'StoreReading_3_4', 'StoreReading_3_5', 'StoreReading_3_6'],
                total: 6
            },
            'Execução': {
                questions: ['Execution_4_1', 'Execution_4_2', 'Execution_4_3', 'Execution_4_4', 'Execution_4_5'],
                total: 5
            },
            'Negociação': {
                questions: ['Negotiation_5_1', 'Negotiation_5_2', 'Negotiation_5_3', 'Negotiation_5_4'],
                total: 4
            },
            'Fechamento': {
                questions: ['Closing_6_1', 'Closing_6_2'],
                total: 2
            }
        };

        const TOTAL_POINTS_ALL_SECTIONS = Object.values(sectionWeights).reduce((sum, section) => sum + section.total, 0);

        const CRITICAL_QUESTIONS_MAP = {
            'StoreReading_3_1': "Analisou todos os corredores",
            'StoreReading_3_4': "Verificou rupturas",
            'Execution_4_1': "Abasteceu a loja",
            'Execution_4_2': "Garantiu limpeza",
            'Negotiation_5_2': "Mostrou soluções aplicadas",
            'Negotiation_5_3': "Apresentou levantamento de estoque",
            'Closing_6_1': "Combinou valor e prazo"
        };
        // ========================================================================
        
        document.addEventListener('DOMContentLoaded', async function() {
            loggedInSupervisor = localStorage.getItem('username');
            if (!localStorage.getItem('isAuthenticated') || !loggedInSupervisor) {
                alert('Você precisa estar logado para acessar.');
                window.location.href = 'index.htm';
                return;
            }
            
            await fetchDataAndRenderDashboard();
            
            document.getElementById('applyFilters').addEventListener('click', renderDashboard);
            document.getElementById('resetFilters').addEventListener('click', resetFiltersAndRender);
            document.getElementById('backButton').addEventListener('click', () => window.location.href = 'inicio.htm');
            document.getElementById('logoutButton').addEventListener('click', () => {
                localStorage.clear();
                window.location.href = 'index.htm';
            });
        });

        async function fetchDataAndRenderDashboard() {
            try {
                const response = await fetch(`${APP_SCRIPT_URL}?action=getAuditData&supervisorName=${encodeURIComponent(loggedInSupervisor)}`);
                const result = await response.json();
                if (result.success) {
                    allAuditData = result.data;
                    populateSalespersonFilter(allAuditData);
                    renderDashboard();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Erro ao buscar dados:', error);
                document.getElementById('salespersonPerformanceTableBody').innerHTML = `<tr><td colspan="9" class="text-center text-red-500 py-8">Erro de conexão: ${error.message}</td></tr>`;
            }
        }

        function populateSalespersonFilter(data) {
            const salespeople = [...new Set(data.map(audit => audit.Vendedor).filter(Boolean))].sort();
            const select = document.getElementById('filterVendedor');
            select.innerHTML = '<option value="">Todos os Vendedores</option>';
            salespeople.forEach(name => {
                const option = document.createElement('option');
                option.value = name;
                option.textContent = name;
                select.appendChild(option);
            });
        }
        
        function processAndFilterData() {
            const selectedVendedor = document.getElementById('filterVendedor').value;
            const selectedMes = document.getElementById('filterMes').value;

            return allAuditData.filter(audit => {
                const matchesVendedor = !selectedVendedor || audit.Vendedor === selectedVendedor;
                let matchesMes = true;
                if (selectedMes) {
                    const auditDate = moment(audit['Data Visita'], 'YYYY-MM-DD');
                    const filterDate = moment(selectedMes);
                    matchesMes = auditDate.isValid() && auditDate.isSame(filterDate, 'month');
                }
                return matchesVendedor && matchesMes;
            });
        }
        
        function renderDashboard() {
            const filteredData = processAndFilterData();
            
            const performanceData = calculatePerformanceMetrics(filteredData);
            const problemAreas = calculateProblemAreas(filteredData);
            const failingItems = calculateFailingItems(filteredData);

            updateKpiCards(filteredData.length, performanceData.overallAverage, performanceData.avgCriticalRejected);
            renderPerformanceRankingChart(performanceData.bySalesperson);
            renderProblemAreasChart(problemAreas);
            renderTopFailingItems(failingItems);
            renderSalespersonPerformanceTable(performanceData.bySalesperson);
        }

        function resetFiltersAndRender() {
            document.getElementById('filterVendedor').value = '';
            document.getElementById('filterMes').value = '';
            renderDashboard();
        }

        // --- Funções de Cálculo ---
        function calculateScore(audit, sectionName) {
            const section = sectionWeights[sectionName];
            if (!section) return 0;

            let achievedScore = section.questions.reduce((sum, qId) => {
                if (audit.hasOwnProperty(qId) && String(audit[qId]).trim().toLowerCase() === 'sim') {
                    return sum + 1;
                }
                return sum;
            }, 0);
            
            return section.total > 0 ? (achievedScore / section.total) * 100 : 0;
        }

        function calculatePerformanceMetrics(data) {
            const performance = {};
            let totalGeneralScore = 0;
            let totalCriticalRejected = 0;

            data.forEach(audit => {
                const salesperson = audit.Vendedor;
                if (!salesperson) return;

                if (!performance[salesperson]) {
                    performance[salesperson] = { 
                        auditCount: 0,
                        scores: Object.keys(sectionWeights).reduce((acc, sec) => ({...acc, [sec]: []}), {}),
                        generalScores: []
                    };
                }
                
                performance[salesperson].auditCount++;
                let auditTotalPoints = 0;
                Object.keys(sectionWeights).forEach(sec => {
                    const sectionScorePercent = calculateScore(audit, sec);
                    performance[salesperson].scores[sec].push(sectionScorePercent);
                    auditTotalPoints += (sectionScorePercent / 100) * sectionWeights[sec].total;
                });

                const generalScore = (auditTotalPoints / TOTAL_POINTS_ALL_SECTIONS) * 100;
                performance[salesperson].generalScores.push(generalScore);
                totalGeneralScore += generalScore;
                
                totalCriticalRejected += Object.keys(CRITICAL_QUESTIONS_MAP).reduce((count, qId) => {
                    if (audit.hasOwnProperty(qId) && String(audit[qId]).trim().toLowerCase() === 'não') {
                        return count + 1;
                    }
                    return count;
                }, 0);
            });

            const bySalesperson = Object.keys(performance).map(name => {
                const avgScores = {};
                Object.keys(performance[name].scores).forEach(sec => {
                    const scores = performance[name].scores[sec];
                    avgScores[sec] = scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;
                });
                const generalAvg = performance[name].generalScores.length > 0 ? performance[name].generalScores.reduce((a,b) => a+b, 0) / performance[name].generalScores.length : 0;
                return { name, audits: performance[name].auditCount, avgScores, generalAvg };
            }).sort((a, b) => b.generalAvg - a.generalAvg);

            return {
                bySalesperson,
                overallAverage: data.length > 0 ? totalGeneralScore / data.length : 0,
                avgCriticalRejected: data.length > 0 ? totalCriticalRejected / data.length : 0
            };
        }

        function calculateProblemAreas(data) {
            const areaScores = Object.keys(sectionWeights).reduce((acc, sec) => ({...acc, [sec]: []}), {});
            data.forEach(audit => {
                Object.keys(sectionWeights).forEach(sec => {
                    areaScores[sec].push(calculateScore(audit, sec));
                });
            });

            const labels = Object.keys(areaScores);
            const averages = labels.map(label => {
                const scores = areaScores[label];
                return scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;
            });

            return { labels, averages };
        }
        
        function calculateFailingItems(data) {
            const failingCounts = Object.keys(CRITICAL_QUESTIONS_MAP).reduce((acc, qId) => ({...acc, [qId]: 0}), {});
            data.forEach(audit => {
                Object.keys(failingCounts).forEach(qId => {
                    if (audit.hasOwnProperty(qId) && String(audit[qId]).trim().toLowerCase() === 'não') {
                        failingCounts[qId]++;
                    }
                });
            });
            return Object.entries(failingCounts)
                .map(([qId, count]) => ({'name': CRITICAL_QUESTIONS_MAP[qId], count}))
                .filter(item => item.count > 0)
                .sort((a, b) => b.count - a.count);
        }

        // --- Funções de Renderização ---
        function updateKpiCards(totalAudits, avgConformity, avgCritical) {
            document.getElementById('totalAudits').innerText = totalAudits;
            document.getElementById('avgConformity').innerText = `${avgConformity.toFixed(0)}%`;
            document.getElementById('avgCriticalRejected').innerText = avgCritical.toFixed(1);
        }

        function renderSalespersonPerformanceTable(data) {
            const tableBody = document.getElementById('salespersonPerformanceTableBody');
            tableBody.innerHTML = '';
            if (data.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="9" class="text-center text-gray-500 py-8">Nenhum dado encontrado para os filtros selecionados.</td></tr>`;
                return;
            }
            
            const getScoreClass = (score) => {
                if (score >= 90) return 'score-high';
                if (score >= 70) return 'score-medium';
                return 'score-low';
            };

            data.forEach(sp => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                let cells = `<td class="px-4 py-4 font-medium text-gray-900">${sp.name}</td>
                             <td class="px-4 py-4 text-gray-500">${sp.audits}</td>`;
                
                Object.keys(sectionWeights).forEach(sec => {
                    const score = sp.avgScores[sec];
                    cells += `<td class="px-4 py-4 font-semibold text-center ${getScoreClass(score)}">${score.toFixed(0)}%</td>`;
                });

                cells += `<td class="px-4 py-4 font-bold text-center text-blue-700 ${getScoreClass(sp.generalAvg)}">${sp.generalAvg.toFixed(0)}%</td>`;
                row.innerHTML = cells;
                tableBody.appendChild(row);
            });
        }
        
        function renderChart(chartId, type, data, options) {
            if (chartInstances[chartId]) {
                chartInstances[chartId].destroy();
            }
            const ctx = document.getElementById(chartId).getContext('2d');
            chartInstances[chartId] = new Chart(ctx, { type, data, options });
        }

        function renderPerformanceRankingChart(data) {
            const labels = data.map(sp => sp.name);
            const scores = data.map(sp => sp.generalAvg);
            const backgroundColors = scores.map(score => score >= 90 ? '#22C55E' : score >= 70 ? '#F97316' : '#EF4444');

            renderChart('performanceRankingChart', 'bar', {
                labels,
                datasets: [{
                    label: 'Nota Geral Média',
                    data: scores,
                    backgroundColor: backgroundColors,
                    borderColor: backgroundColors,
                    borderWidth: 1
                }]
            }, {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                scales: { x: { beginAtZero: true, max: 100 } },
                plugins: { legend: { display: false } }
            });
        }

        function renderProblemAreasChart(data) {
            renderChart('problemAreasChart', 'radar', {
                labels: data.labels,
                datasets: [{
                    label: 'Média de Conformidade por Etapa',
                    data: data.averages,
                    backgroundColor: 'rgba(59, 130, 246, 0.2)',
                    borderColor: 'rgba(59, 130, 246, 1)',
                    borderWidth: 2,
                    pointBackgroundColor: 'rgba(59, 130, 246, 1)',
                }]
            }, {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    r: {
                        beginAtZero: true,
                        max: 100,
                        angleLines: { color: 'rgba(0, 0, 0, 0.1)' },
                        grid: { color: 'rgba(0, 0, 0, 0.1)' },
                        pointLabels: { font: { size: 12 } },
                        ticks: { backdropColor: 'white', color: 'black' }
                    }
                },
                plugins: { legend: { display: false } }
            });
        }
        
        function renderTopFailingItems(items) {
            const container = document.getElementById('topFailingItems');
            container.innerHTML = '';
            if (items.length === 0) {
                 container.innerHTML = '<p class="text-gray-500">Nenhuma falha em itens críticos registrada para o período selecionado.</p>';
                 return;
            }

            const list = document.createElement('ul');
            list.className = 'space-y-2';
            items.slice(0, 3).forEach(item => { // Mostra apenas os top 3
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-gray-50 p-3 rounded-md';
                li.innerHTML = `<span class="font-medium text-gray-800">${item.name}</span>
                                <span class="font-bold text-red-600 bg-red-100 px-3 py-1 rounded-full text-sm">${item.count} falha(s)</span>`;
                list.appendChild(li);
            });
            container.appendChild(list);
        }
    </script>
</body>
</html>
