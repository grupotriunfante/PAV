<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Desempenho de Auditorias</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1); }
        .chart-container { position: relative; height: 400px; width: 100%; }
        .score-high { background-color: #D1FAE5; color: #065F46; }
        .score-medium { background-color: #FEF3C7; color: #92400E; }
        .score-low { background-color: #FEE2E2; color: #991B1B; }
        .table-section-header { background-color: #F3F4F6; font-weight: 600; color: #1F2937; }
        .manager-only { display: none; }
    </style>
</head>
<body class="bg-gray-50">

    <main class="container mx-auto p-4 md:p-8 space-y-8">
        
        <header class="flex flex-wrap justify-between items-center gap-4">
            <div>
                <h1 id="dashboardTitle" class="text-3xl font-extrabold text-gray-900">Dashboard de Desempenho</h1>
                <p class="text-gray-500 mt-1">Análise de performance das auditorias de campo.</p>
            </div>
            <div class="flex items-center space-x-4">
                 <button id="backButton" class="py-2 px-4 bg-white text-gray-700 font-semibold rounded-lg border border-gray-300 hover:bg-gray-100 transition">Voltar</button>
                 <button id="logoutButton" class="py-2 px-4 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition">Sair</button>
            </div>
        </header>

        <div class="card p-4">
            <div class="flex flex-wrap items-end gap-4">
                <div class="flex-grow min-w-[200px] manager-only">
                    <label for="filterSupervisor" class="text-sm font-medium text-gray-700">Supervisor</label>
                    <select id="filterSupervisor" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"><option value="">Todos</option></select>
                </div>
                <div class="flex-grow min-w-[200px]">
                    <label for="filterVendedor" class="text-sm font-medium text-gray-700">Vendedor</label>
                    <select id="filterVendedor" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"><option value="">Todos</option></select>
                </div>
                <div class="flex-grow min-w-[150px]">
                    <label for="filterMes" class="text-sm font-medium text-gray-700">Mês</label>
                    <input type="month" id="filterMes" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                </div>
                <button id="applyFilters" class="py-2 px-6 bg-blue-600 text-white font-bold rounded-lg shadow-md hover:bg-blue-700">Aplicar</button>
                <button id="resetFilters" class="py-2 px-6 bg-gray-600 text-white font-bold rounded-lg shadow-md hover:bg-gray-700">Limpar</button>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="card p-6 flex items-center space-x-4">
                <div class="bg-blue-100 p-3 rounded-full"><svg class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/></svg></div>
                <div>
                    <p class="text-sm text-gray-500">Total de Auditorias</p>
                    <p id="totalAudits" class="text-3xl font-bold text-gray-900">0</p>
                </div>
            </div>
            <div class="card p-6 flex items-center space-x-4">
                <div class="bg-green-100 p-3 rounded-full"><svg class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg></div>
                <div>
                    <p class="text-sm text-gray-500">Média de Nota Geral</p>
                    <p id="avgConformity" class="text-3xl font-bold text-gray-900">0</p>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
            <div class="lg:col-span-2 card p-6">
                <h3 id="rankingTitle" class="text-lg font-semibold text-gray-800">Ranking de Performance</h3>
                <div class="chart-container mt-4"><canvas id="performanceRankingChart"></canvas></div>
            </div>
            <div class="lg:col-span-3 card p-6">
                <h3 class="text-lg font-semibold text-gray-800">Desempenho por Pergunta</h3>
                <div class="mt-4 overflow-auto max-h-[360px]">
                     <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50 sticky top-0"><tr><th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Ação</th><th class="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">Peso</th><th class="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">Não Conforme</th><th class="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">% Conforme</th></tr></thead>
                        <tbody id="questionPerformanceTableBody" class="bg-white divide-y divide-gray-200"></tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <div class="card p-6">
            <h3 id="detailedTableTitle" class="text-lg font-semibold text-gray-800 mb-4">Desempenho Detalhado</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                     <thead class="bg-gray-50"><tr id="detailedTableHeader"></tr></thead>
                    <tbody id="detailedPerformanceTableBody" class="bg-white divide-y divide-gray-200">
                        <tr><td colspan="10" class="text-center text-gray-500 py-8">Carregando dados...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <script>
        const APP_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw-DXVXSxS_Q2YjcPxC1jBtvrpe4w8TbWRt33Zxy85hKHcIEyF52kpN14bial4OoH-p/exec';
        let allAuditData = [];
        let chartInstances = {};

        const loggedInUser = {
            name: localStorage.getItem('username'),
            role: localStorage.getItem('userRole'),
            unit: localStorage.getItem('userUnit')
        };
        
        // As chaves aqui (ex: 'PreVisit_2_1') DEVEM ser idênticas aos cabeçalhos da sua planilha Google
        const questionWeights = { 'Planejamento_1_1': 1, 'Planejamento_1_2': 1, 'Planejamento_1_3': 1, 'Planejamento_1_4': 2, 'Planejamento_1_5': 3, 'Planejamento_1_6': 1, 'Planejamento_1_7': 1, 'Planejamento_1_8': 0, 'Planejamento_1_9': 0, 'PreVisit_2_1': 4, 'PreVisit_2_2': 5, 'PreVisit_2_3': 5, 'StoreReading_3_1': 6, 'StoreReading_3_2': 3, 'StoreReading_3_3': 4, 'StoreReading_3_4': 6, 'StoreReading_3_5': 4, 'StoreReading_3_6': 7, 'Execution_4_1': 4, 'Execution_4_2': 3, 'Execution_4_3': 4, 'Execution_4_4': 4, 'Execution_4_5': 5, 'Negotiation_5_1': 6, 'Negotiation_5_2': 7, 'Negotiation_5_3': 7, 'Negotiation_5_4': 3, 'Closing_6_1': 2, 'Closing_6_2': 1 };
        const questionTextMap = { 'Planejamento_1_1': '1.1 Bem-apresentado', 'Planejamento_1_2': '1.2 Palm carregado', 'Planejamento_1_3': '1.3 Carro limpo', 'Planejamento_1_4': '1.4 Roteiro definido', 'Planejamento_1_5': '1.5 Metas definidas', 'Planejamento_1_6': '1.6 Materiais em mãos', 'Planejamento_1_7': '1.7 Conhecimento campanhas', 'PreVisit_2_1': '2.1 Verificou histórico', 'PreVisit_2_2': '2.2 Criou estratégias', 'PreVisit_2_3': '2.3 Itens focos do mês', 'StoreReading_3_1': '3.1 Analisou corredores', 'StoreReading_3_2': '3.2 Produtos precificados', 'StoreReading_3_3': '3.3 Visitou estoque', 'StoreReading_3_4': '3.4 Verificou rupturas', 'StoreReading_3_5': '3.5 Checou lançamentos', 'StoreReading_3_6': '3.6 Montou pré-pedido', 'Execution_4_1': '4.1 Abasteceu a loja', 'Execution_4_2': '4.2 Garantiu limpeza', 'Execution_4_3': '4.3 Posicionou expositores', 'Execution_4_4': '4.4 Aplicou Cross Merch.', 'Execution_4_5': '4.5 Verificou validade (FIFO)', 'Negotiation_5_1': '5.1 Iniciou negociação', 'Negotiation_5_2': '5.2 Mostrou soluções', 'Negotiation_5_3': '5.3 Apresentou levantamento', 'Negotiation_5_4': '5.4 Reforçou parceria', 'Closing_6_1': '6.1 Repassou valor/prazo', 'Closing_6_2': '6.2 Combinou retorno' };
        const sectionDefinitions = { 'Planejamento': { questions: ['Planejamento_1_1', 'Planejamento_1_2', 'Planejamento_1_3', 'Planejamento_1_4', 'Planejamento_1_5', 'Planejamento_1_6', 'Planejamento_1_7'], total: 10 }, 'Pré-Visita': { questions: ['PreVisit_2_1', 'PreVisit_2_2', 'PreVisit_2_3'], total: 14 }, 'Leitura de Loja': { questions: ['StoreReading_3_1', 'StoreReading_3_2', 'StoreReading_3_3', 'StoreReading_3_4', 'StoreReading_3_5', 'StoreReading_3_6'], total: 30 }, 'Execução': { questions: ['Execution_4_1', 'Execution_4_2', 'Execution_4_3', 'Execution_4_4', 'Execution_4_5'], total: 20 }, 'Negociação': { questions: ['Negotiation_5_1', 'Negotiation_5_2', 'Negotiation_5_3'], total: 20 }, 'Fechamento': { questions: ['Negotiation_5_4', 'Closing_6_1', 'Closing_6_2'], total: 6 } };

        document.addEventListener('DOMContentLoaded', async () => {
            if (!loggedInUser.name) {
                alert('Você precisa estar logado para acessar.');
                window.location.href = 'index.htm';
                return;
            }
            setupUIForRole();
            await fetchDataAndRender();
            document.getElementById('applyFilters').addEventListener('click', () => renderFilteredDashboard());
            document.getElementById('resetFilters').addEventListener('click', resetAndRender);
            document.getElementById('backButton').addEventListener('click', () => window.location.href = 'inicio.htm');
            document.getElementById('logoutButton').addEventListener('click', () => {
                localStorage.clear();
                window.location.href = 'index.htm';
            });
        });

        function setupUIForRole() {
            const title = document.getElementById('dashboardTitle');
            if (loggedInUser.role === 'Gerente') {
                title.textContent = `Dashboard Gerencial - Unidade ${loggedInUser.unit}`;
                document.querySelector('.manager-only').style.display = 'block';
                document.getElementById('rankingTitle').textContent = 'Ranking de Supervisores (Nº Auditorias)';
                document.getElementById('detailedTableTitle').textContent = 'Desempenho Detalhado (Todos os Vendedores)';
            } else {
                title.textContent = `Dashboard de Desempenho - ${loggedInUser.name}`;
                document.getElementById('rankingTitle').textContent = 'Ranking de Vendedores (Nota Geral)';
            }
        }

        async function fetchDataAndRender() {
            document.body.style.cursor = 'wait';
            let url = `${APP_SCRIPT_URL}?action=getAuditData`;
            if (loggedInUser.role === 'Gerente') {
                url += `&managerUnidade=${encodeURIComponent(loggedInUser.unit)}`;
            } else {
                url += `&supervisorName=${encodeURIComponent(loggedInUser.name)}`;
            }
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Falha na resposta da rede.');
                const result = await response.json();
                if (result.success) {
                    allAuditData = result.data;
                    populateFilters(allAuditData);
                    renderDashboard(allAuditData);
                } else {
                    throw new Error(result.message || 'Erro ao buscar dados.');
                }
            } catch (error) {
                console.error('Erro fatal ao buscar dados:', error);
                alert(`Não foi possível carregar os dados: ${error.message}. Verifique o console (F12) para mais detalhes.`);
            } finally {
                document.body.style.cursor = 'default';
            }
        }

        function populateFilters(data) {
            const salespeople = [...new Set(data.map(a => a.Vendedor).filter(Boolean))].sort();
            const vendorsSelect = document.getElementById('filterVendedor');
            vendorsSelect.innerHTML = '<option value="">Todos os Vendedores</option>';
            salespeople.forEach(name => vendorsSelect.innerHTML += `<option value="${name}">${name}</option>`);

            if (loggedInUser.role === 'Gerente') {
                const supervisors = [...new Set(data.map(a => a.Supervisor).filter(Boolean))].sort();
                const supervisorsSelect = document.getElementById('filterSupervisor');
                supervisorsSelect.innerHTML = '<option value="">Todos os Supervisores</option>';
                supervisors.forEach(name => supervisorsSelect.innerHTML += `<option value="${name}">${name}</option>`);
            }
        }

        function renderFilteredDashboard() {
            const selectedSupervisor = document.getElementById('filterSupervisor').value;
            const selectedVendedor = document.getElementById('filterVendedor').value;
            const selectedMes = document.getElementById('filterMes').value;
            const filteredData = allAuditData.filter(audit => {
                const matchesSupervisor = !selectedSupervisor || audit.Supervisor === selectedSupervisor;
                const matchesVendedor = !selectedVendedor || audit.Vendedor === selectedVendedor;
                const matchesMes = !selectedMes || (audit['Data Visita'] && audit['Data Visita'].startsWith(selectedMes));
                return matchesSupervisor && matchesVendedor && matchesMes;
            });
            renderDashboard(filteredData);
        }

        function resetAndRender() {
            document.getElementById('filterVendedor').value = '';
            document.getElementById('filterMes').value = '';
            if (loggedInUser.role === 'Gerente') document.getElementById('filterSupervisor').value = '';
            renderDashboard(allAuditData);
        }

        function renderDashboard(data) {
            const performanceData = calculatePerformanceMetrics(data);
            updateKpiCards(data.length, performanceData.overallAverage);
            renderQuestionPerformanceTable(calculateQuestionPerformance(data));
            renderDetailedTable(performanceData.bySalesperson, loggedInUser.role === 'Gerente');
            
            if (loggedInUser.role === 'Gerente') {
                renderRankingChart(performanceData.bySupervisor, 'Nº de Auditorias', 'auditCount');
            } else {
                renderRankingChart(performanceData.bySalesperson, 'Nota Média', 'generalAvg');
            }
        }
        
        // FUNÇÕES DE CÁLCULO E RENDERIZAÇÃO (BASEADAS NO SEU CÓDIGO ORIGINAL)
        function calculateScore(audit, sectionName) {
            const section = sectionDefinitions[sectionName];
            if (!section) return 0;
            const achievedScore = section.questions.reduce((sum, qId) => {
                if (audit.hasOwnProperty(qId) && String(audit[qId]).toLowerCase() === 'sim') {
                    return sum + (questionWeights[qId] || 0);
                }
                return sum;
            }, 0);
            return section.total > 0 ? (achievedScore / section.total) * 100 : 0;
        }

        function calculatePerformanceMetrics(data) {
            const bySalesperson = {};
            const bySupervisor = {};
            let totalGeneralScore = 0;

            data.forEach(audit => {
                const salesperson = audit.Vendedor;
                const supervisor = audit.Supervisor;
                if (!salesperson) return;

                if (!bySalesperson[salesperson]) {
                    bySalesperson[salesperson] = { name: salesperson, supervisor: supervisor, auditCount: 0, scores: {}, generalScores: [] };
                }
                bySalesperson[salesperson].auditCount++;
                
                let auditTotalPoints = 0;
                Object.keys(questionWeights).forEach(qId => {
                    if (audit.hasOwnProperty(qId) && String(audit[qId]).toLowerCase() === 'sim') {
                        auditTotalPoints += questionWeights[qId];
                    }
                });
                bySalesperson[salesperson].generalScores.push(auditTotalPoints);
                totalGeneralScore += auditTotalPoints;

                Object.keys(sectionDefinitions).forEach(secName => {
                    if (!bySalesperson[salesperson].scores[secName]) bySalesperson[salesperson].scores[secName] = [];
                    bySalesperson[salesperson].scores[secName].push(calculateScore(audit, secName));
                });

                if (supervisor) {
                    if (!bySupervisor[supervisor]) bySupervisor[supervisor] = { name: supervisor, auditCount: 0 };
                    bySupervisor[supervisor].auditCount++;
                }
            });

            const processedSalespeople = Object.values(bySalesperson).map(sp => {
                sp.generalAvg = sp.generalScores.length > 0 ? sp.generalScores.reduce((a, b) => a + b, 0) / sp.auditCount : 0;
                sp.avgSectionScores = {};
                Object.keys(sectionDefinitions).forEach(secName => {
                    const scores = sp.scores[secName] || [];
                    sp.avgSectionScores[secName] = scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;
                });
                return sp;
            });

            return {
                bySalesperson: processedSalespeople.sort((a, b) => b.generalAvg - a.generalAvg),
                bySupervisor: Object.values(bySupervisor).sort((a, b) => b.auditCount - a.auditCount),
                overallAverage: data.length > 0 ? totalGeneralScore / data.length : 0,
            };
        }

        function calculateQuestionPerformance(data) {
            const stats = {};
            Object.keys(questionTextMap).forEach(qId => { stats[qId] = { success: 0, total: 0 }; });
            data.forEach(audit => {
                Object.keys(questionTextMap).forEach(qId => {
                    if (audit.hasOwnProperty(qId)) {
                        stats[qId].total++;
                        if (String(audit[qId]).toLowerCase() === 'sim') stats[qId].success++;
                    }
                });
            });
            return Object.keys(questionTextMap).map(qId => ({
                id: qId,
                text: questionTextMap[qId],
                weight: questionWeights[qId],
                nonConformity: stats[qId].total - stats[qId].success,
                conformity: stats[qId].total > 0 ? (stats[qId].success / stats[qId].total) * 100 : 0
            })).filter(q => questionWeights[qId] > 0);
        }

        function updateKpiCards(totalAudits, avgConformity) {
            document.getElementById('totalAudits').innerText = totalAudits;
            document.getElementById('avgConformity').innerText = Math.round(avgConformity);
        }

        function renderDetailedTable(data, isManagerView) {
            const tableHeader = document.getElementById('detailedTableHeader');
            const tableBody = document.getElementById('detailedPerformanceTableBody');
            tableHeader.innerHTML = '';
            tableBody.innerHTML = '';

            let headers = [];
            if (isManagerView) headers.push('Supervisor');
            headers.push('Vendedor', 'Auditorias', ...Object.keys(sectionDefinitions).map(s => `${s} (Peso ${sectionDefinitions[s].total})`), 'Nota Geral');
            tableHeader.innerHTML = headers.map(h => `<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">${h}</th>`).join('');

            if (data.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="${headers.length}" class="text-center text-gray-500 py-8">Nenhum dado encontrado.</td></tr>`;
                return;
            }
            const getScoreClass = score => score >= 90 ? 'score-high' : score >= 70 ? 'score-medium' : 'score-low';
            data.forEach(item => {
                let cells = '';
                if (isManagerView) cells += `<td class="px-4 py-4 font-medium text-gray-800">${item.supervisor}</td>`;
                cells += `<td class="px-4 py-4 font-medium text-gray-900">${item.name}</td><td class="px-4 py-4 text-center text-gray-500">${item.auditCount}</td>`;
                Object.keys(sectionDefinitions).forEach(sec => {
                    const score = item.avgSectionScores[sec] || 0;
                    cells += `<td class="px-4 py-4 font-semibold text-center ${getScoreClass(score)}">${score.toFixed(0)}%</td>`;
                });
                cells += `<td class="px-4 py-4 font-bold text-center text-blue-700 ${getScoreClass(item.generalAvg)}">${item.generalAvg.toFixed(0)}</td>`;
                tableBody.innerHTML += `<tr class="hover:bg-gray-50">${cells}</tr>`;
            });
        }
        
        function renderQuestionPerformanceTable(data) {
            const tableBody = document.getElementById('questionPerformanceTableBody');
            tableBody.innerHTML = '';
            const getScoreClass = score => score >= 90 ? 'score-high' : score >= 70 ? 'score-medium' : 'score-low';
            data.forEach(item => {
                tableBody.innerHTML += `<tr><td class="px-4 py-3 text-sm text-gray-700">${item.text}</td><td class="px-4 py-3 text-sm text-gray-500 text-center">${item.weight}</td><td class="px-4 py-3 text-sm font-bold text-center ${item.nonConformity > 0 ? 'text-red-600' : 'text-gray-500'}">${item.nonConformity}</td><td class="px-4 py-3 text-sm font-semibold text-center ${getScoreClass(item.conformity)}">${item.conformity.toFixed(0)}%</td></tr>`;
            });
        }
        
        function renderRankingChart(data, label, dataKey) {
            const labels = data.map(item => item.name);
            const values = data.map(item => item[dataKey]);
            const backgroundColors = dataKey === 'generalAvg' ? values.map(score => score >= 90 ? '#22C55E' : score >= 70 ? '#F97316' : '#EF4444') : '#3b82f6';
            renderChart('performanceRankingChart', 'bar', {
                labels,
                datasets: [{ label: label, data: values, backgroundColor: backgroundColors }]
            }, {
                indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                scales: { x: { beginAtZero: true, max: dataKey === 'generalAvg' ? 100 : undefined } },
                plugins: { legend: { display: false } }
            });
        }

        function renderChart(chartId, type, data, options) {
            if (chartInstances[chartId]) chartInstances[chartId].destroy();
            const ctx = document.getElementById(chartId).getContext('2d');
            chartInstances[chartId] = new Chart(ctx, { type, data, options });
        }
    </script>
</body>
</html>
